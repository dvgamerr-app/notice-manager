name: Docker

on:
  push:
    branches: [ main ]
    tags:
      - v*

jobs:
  notice-ui:
    name: UI - Build and Deploy
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout SourceCode
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install and Build ðŸ”§ # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.
        run: |
          yarn
          yarn build
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: dist
          CLEAN: true
  # notice-ui:
  #   runs-on: ubuntu-18.04
  #   env:
  #     IMAGE_FILE: notice-ui.Dockerfile
  #     IMAGE_NAME: notice-ui
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build image $IMAGE_NAME
  #       run: docker build -f $IMAGE_FILE -t $IMAGE_NAME .

  #     - name: Log into docker.io
  #       run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin

  #     - name: Push image to docker.io
  #       run: |
  #         IMAGE_ID=${{ github.actor }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
  # notice-api:
  #   runs-on: ubuntu-18.04
  #   env:
  #     IMAGE_FILE: notice-api.Dockerfile
  #     IMAGE_NAME: notice-api
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build image $IMAGE_NAME
  #       run: docker build -f $IMAGE_FILE -t $IMAGE_NAME .

  #     - name: Log into docker.io
  #       run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin

  #     - name: Push image to docker.io
  #       run: |
  #         IMAGE_ID=${{ github.actor }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
  # notice-ui:
  #   runs-on: ubuntu-18.04
  #   env:
  #     IMAGE_FILE: notice-ui.Dockerfile
  #     IMAGE_NAME: notice-ui
  #   steps:
  #     - uses: actions/checkout@v2.1.0

  #     - name: Set up Docker BuildX
  #       uses: crazy-max/ghaction-docker-buildx@v1

  #     - name: Log into docker.io
  #       run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin

  #     - name: Prepare image and tag name
  #       id: prepare
  #       run: |
  #         IMAGE_ID=${{ github.actor }}/$IMAGE_NAME
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         echo ::set-output name=image_tags::$IMAGE_ID:$VERSION

  #     - name: Run Buildx and Push image.
  #       run: |
  #         docker buildx build \
  #           --platform linux/arm/v7 \
  #           --tag ${{ steps.prepare.outputs.image_tags }} \
  #           --file $IMAGE_FILE \
  #           --output type=image,push=true .

  # notice-api:
  #   runs-on: ubuntu-18.04
  #   env:
  #     IMAGE_FILE: notice-api.Dockerfile
  #     IMAGE_NAME: notice-api
  #   steps:
  #     - uses: actions/checkout@v2.1.0

  #     - name: Set up Docker BuildX
  #       uses: crazy-max/ghaction-docker-buildx@v1

  #     - name: Log into docker.io
  #       run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin

  #     - name: Prepare image and tag name
  #       id: prepare
  #       run: |
  #         IMAGE_ID=${{ github.actor }}/$IMAGE_NAME
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         echo ::set-output name=image_tags::$IMAGE_ID:$VERSION

  #     - name: Run BuildX and Push image.
  #       run: |
  #         docker buildx build \
  #           --platform linux/arm/v7 \
  #           --tag ${{ steps.prepare.outputs.image_tags }} \
  #           --file $IMAGE_FILE \
  #           --output type=image,push=true .
