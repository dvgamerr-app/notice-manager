name: "Build GithubPages"

on:
  push:
    branches: [ main ]
    tags:
      - v*

jobs:
  notice-ui:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [14]

    steps:
      - name: Checkout üõé
        uses: actions/checkout@master

      - name: Setup node env üèó
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path üõ†
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules üì¶
        uses: actions/cache@v2.1.4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies üë®üèª‚Äçüíª
        run: yarn

      - name: Run linter üëÄ
        run: yarn lint

      - name: Run Build ‚öôÔ∏è
        run: yarn generate

      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: dist
          CLEAN: true

  # notice-ui:
  #   runs-on: ubuntu-18.04
  #   env:
  #     IMAGE_FILE: notice-ui.Dockerfile
  #     IMAGE_NAME: notice-ui
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build image $IMAGE_NAME
  #       run: docker build -f $IMAGE_FILE -t $IMAGE_NAME .

  #     - name: Log into docker.io
  #       run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin

  #     - name: Push image to docker.io
  #       run: |
  #         IMAGE_ID=${{ github.actor }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
  # notice-api:
  #   runs-on: ubuntu-18.04
  #   env:
  #     IMAGE_FILE: notice-api.Dockerfile
  #     IMAGE_NAME: notice-api
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build image $IMAGE_NAME
  #       run: docker build -f $IMAGE_FILE -t $IMAGE_NAME .

  #     - name: Log into docker.io
  #       run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin

  #     - name: Push image to docker.io
  #       run: |
  #         IMAGE_ID=${{ github.actor }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
  # notice-ui:
  #   runs-on: ubuntu-18.04
  #   env:
  #     IMAGE_FILE: notice-ui.Dockerfile
  #     IMAGE_NAME: notice-ui
  #   steps:
  #     - uses: actions/checkout@v2.1.0

  #     - name: Set up Docker BuildX
  #       uses: crazy-max/ghaction-docker-buildx@v1

  #     - name: Log into docker.io
  #       run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin

  #     - name: Prepare image and tag name
  #       id: prepare
  #       run: |
  #         IMAGE_ID=${{ github.actor }}/$IMAGE_NAME
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         echo ::set-output name=image_tags::$IMAGE_ID:$VERSION

  #     - name: Run Buildx and Push image.
  #       run: |
  #         docker buildx build \
  #           --platform linux/arm/v7 \
  #           --tag ${{ steps.prepare.outputs.image_tags }} \
  #           --file $IMAGE_FILE \
  #           --output type=image,push=true .

  # notice-api:
  #   runs-on: ubuntu-18.04
  #   env:
  #     IMAGE_FILE: notice-api.Dockerfile
  #     IMAGE_NAME: notice-api
  #   steps:
  #     - uses: actions/checkout@v2.1.0

  #     - name: Set up Docker BuildX
  #       uses: crazy-max/ghaction-docker-buildx@v1

  #     - name: Log into docker.io
  #       run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin

  #     - name: Prepare image and tag name
  #       id: prepare
  #       run: |
  #         IMAGE_ID=${{ github.actor }}/$IMAGE_NAME
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         echo ::set-output name=image_tags::$IMAGE_ID:$VERSION

  #     - name: Run BuildX and Push image.
  #       run: |
  #         docker buildx build \
  #           --platform linux/arm/v7 \
  #           --tag ${{ steps.prepare.outputs.image_tags }} \
  #           --file $IMAGE_FILE \
  #           --output type=image,push=true .
