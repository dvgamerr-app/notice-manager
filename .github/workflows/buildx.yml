name: Build & deploy next version

on:
  push:
    branches: [main]

jobs:
  notice-ui:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        node: [16]

    env:
      IMAGE_NAME: line-liff
      PLATFORMS: linux/amd64,linux/arm64/v8
      IMAGE_FILE: notice-ui.Dockerfile
      KUBE_DEPLOY: deploy/line-liff
      KUBE_CONTAINER: line-liff
      KUBE_NAMESPACE: notice-line

      BASE_URL: https://notice.touno.io
    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Setup node env 🏗
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v3.0.7
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        run: yarn

      - name: Run linter 👀
        run: yarn lint

      - name: Run Build ⚙️
        run: yarn build
      - name: Prepare 🔰
        id: prepare
        run: |
          echo ::set-output name=kube_deploy::${KUBE_DEPLOY}
          echo ::set-output name=kube_container::${KUBE_CONTAINER}
          echo ::set-output name=kube_namespace::${KUBE_NAMESPACE}

          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=v$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo ::set-output name=docker_image::${{github.actor}}/${IMAGE_NAME}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform $PLATFORMS \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VERSION=$VERSION \
            --tag ${{github.actor}}/$IMAGE_NAME:$VERSION --file $IMAGE_FILE .

      - name: Set up Docker Buildx 📐
        uses: docker/setup-buildx-action@v2

      - name: Docker Buildx ⚙️
        run: docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

      - name: Login to DockerHub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker Push 📌
        if: success() && github.event_name != 'pull_request'
        run: docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}

      - name: Inspect 🔍
        if: success() && github.event_name != 'pull_request'
        run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      # - name: Trigger deploy 🚀
      #   if: success() && github.event_name != 'pull_request'
      #   uses: Consensys/kubernetes-action@1.1.0
      #   env:
      #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      #   with:
      #     args: set image ${{ steps.prepare.outputs.kube_deploy }} ${{ steps.prepare.outputs.kube_container }}=${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} -n ${{ steps.prepare.outputs.kube_namespace }}

      - name: Restart deployment 🚀
        if: success() && github.event_name != 'pull_request'
        uses: Consensys/kubernetes-action@1.1.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: rollout restart ${{ steps.prepare.outputs.kube_deploy }} -n ${{ steps.prepare.outputs.kube_namespace }}

      - name: Status deployment 🔍
        if: success() && github.event_name != 'pull_request'
        uses: Consensys/kubernetes-action@1.1.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: rollout status ${{ steps.prepare.outputs.kube_deploy }} -n ${{ steps.prepare.outputs.kube_namespace }}

      # - name: Run Build ⚙️
      #   run: yarn generate

      # - name: Deploy 🚀
      #   uses: JamesIves/github-pages-deploy-action@3.7.1
      #   with:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     BRANCH: gh-pages
      #     FOLDER: dist
      #     CLEAN: true

  notice-api:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        node: [16]
    env:
      IMAGE_FILE: notice-api.Dockerfile
      IMAGE_NAME: notice
      PLATFORMS: linux/amd64,linux/arm64
      KUBE_DEPLOY: deploy/notice-api
      KUBE_CONTAINER: notice-api
      KUBE_NAMESPACE: notice-line
    outputs:
      container_name: ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Setup node env 🏗
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v3.0.7
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        run: yarn

      - name: Prepare 🔰
        id: prepare
        run: |
          echo ::set-output name=kube_deploy::${KUBE_DEPLOY}
          echo ::set-output name=kube_container::${KUBE_CONTAINER}
          echo ::set-output name=kube_namespace::${KUBE_NAMESPACE}

          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=v$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention

          [ "$VERSION" == "main" ] && VERSION=latest

          echo ::set-output name=docker_image::${{github.actor}}/${IMAGE_NAME}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform $PLATFORMS \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VERSION=$VERSION \
            --tag ${{github.actor}}/$IMAGE_NAME:$VERSION --file $IMAGE_FILE .

      - name: Set up Docker Buildx 📐
        uses: docker/setup-buildx-action@v1

      - name: Docker Buildx ⚙️
        run: docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

      - name: Login to DockerHub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker Push 📌
        if: success() && github.event_name != 'pull_request'
        run: docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}

      - name: Inspect 🔍
        if: always() && github.event_name != 'pull_request'
        run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      # - name: Trigger deploy 🚀
      #   if: success() && github.event_name != 'pull_request'
      #   uses: Consensys/kubernetes-action@1.1.0
      #   env:
      #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      #   with:
      #     args: set image ${{ steps.prepare.outputs.kube_deploy }} ${{ steps.prepare.outputs.kube_container }}=${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} -n ${{ steps.prepare.outputs.kube_namespace }}


      - name: Restart deployment 🚀
        if: success() && github.event_name != 'pull_request'
        uses: Consensys/kubernetes-action@1.1.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: rollout restart ${{ steps.prepare.outputs.kube_deploy }} -n ${{ steps.prepare.outputs.kube_namespace }}

      - name: Status deployment 🔍
        if: success() && github.event_name != 'pull_request'
        uses: Consensys/kubernetes-action@1.1.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: rollout status ${{ steps.prepare.outputs.kube_deploy }} -n ${{ steps.prepare.outputs.kube_namespace }}
