name: BuildX

on:
  push:
    branches: [ main ]
    tags:
      - v*

jobs:
  notice-ui:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Setup node env 🏗
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16
          check-latest: true

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v3.0.7
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        run: yarn

      - name: Run linter 👀
        run: yarn lint

      - name: Run Build ⚙️
        run: yarn generate

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@v4.4.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: dist
          CLEAN: true

  notice-api:
    runs-on: ubuntu-18.04
    env:
      IMAGE_FILE: Dockerfile
      IMAGE_NAME: notice
      PLATFORMS: linux/amd64,linux/arm64
    outputs:
      container_name: ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - uses: actions/checkout@v2

      - name: Prepare 🔰
        id: prepare
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=v$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention

          [ "$VERSION" == "main" ] && VERSION=latest

          echo ::set-output name=docker_image::${{github.actor}}/${IMAGE_NAME}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform $PLATFORMS \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VERSION=$VERSION \
            --tag ${{github.actor}}/$IMAGE_NAME:$VERSION --file $IMAGE_FILE .

      - name: Set up Docker Buildx 📐
        uses: crazy-max/ghaction-docker-buildx@v3

      - name: Docker Buildx ⚙️
        run: docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

      - name: Login to DockerHub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker Push 📌
        if: success() && github.event_name != 'pull_request'
        run: docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}

      - name: Inspect 🔍
        if: always() && github.event_name != 'pull_request'
        run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

  k8s:
    runs-on: ubuntu-18.04
    needs: notice-api
    if: success() && github.event_name != 'pull_request' && !contains(github.ref, 'main')
    steps:
      - name: Trigger deploy 🚀
        uses: ladislas14/kubernetes-action@1.02
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: set image deploy/notice-api notice-api=${{ needs.notice-api.outputs.container_name }} -n notice-line
